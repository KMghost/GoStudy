package main

/*
   切片：
   1、每个数组的大小都是固定的。而切片则为数组元素提供动态大小的、灵活的视角。在实践中，切片比数组更常用。
   2、切片通过两个下标来界定，即一个上界和一个下界，二者以冒号分隔：a[low : high]
   3、它会选择一个半开区间，包括第一个元素，但排除最后一个元素。
   4、切片并不存储任何数据，它只是描述了底层数组中的一段。
   5、更改切片的元素会修改其底层数组中对应的元素。
   6、与它共享底层数组的切片都会观测到这些修改。

   切片文法：
   1、切片文法类似于没有长度的数组文法。
       这是一个数组文法：
           [3]bool{true, true, false}
       下面这样则会创建一个和上面相同的数组，然后构建一个引用了它的切片：
           []bool{true, true, false}

   切片的默认行为：
   1、切片下界的默认值为 0，上界则是该切片的长度。
   2、a[:10]      a[0:]

   切片的长度与容量：
   1、切片拥有 长度 和 容量。
   2、切片的长度就是它所包含的元素个数。
   3、切片的容量是从它的第一个元素开始数，到其底层数组元素末尾的个数。
   4、切片 s 的长度和容量可通过表达式 len(s) 和 cap(s) 来获取

   nil 切片
   1、切片的零值是 nil。
   2、nil 切片的长度和容量为 0 且没有底层数组。

   使用 make 创建切片
   1、切片可以用内建函数 make 来创建，这也是你创建动态数组的方式。
   2、make 函数会分配一个元素为零值的数组并返回一个引用了它的切片：

   切片的切片
   1、切片可包含任何类型，甚至包括其它的切片。

   向切片追加元素
   1、Go 提供了内建的 append 函数。
   2、append 的第一个参数 s 是一个元素类型为 T 的切片，其余类型为 T 的值将会追加到该切片的末尾。
   3、append 的结果是一个包含原切片所有元素加上新添加元素的切片。
   4、当 s 的底层数组太小，不足以容纳所有给定的值时，它就会分配一个更大的数组。返回的切片会指向这个新分配的数组。

*/

// ========================================================================
// 切片

// func main() {
//     primes := [6]int{2, 3, 5, 7, 11, 13}
//
//     var s []int = primes[1:4]
//     fmt.Println(s)
// }

// ========================================================================
// 切片就像数组的引用
//
// func main() {
//     names := [4]string{
//         "John",
//         "Paul",
//         "George",
//         "Ringo",
//     }
//     fmt.Println(names)
//
//     a := names[0:2]
//     b := names[1:3]
//     fmt.Println(a, b)
//
//     b[0] = "XXX"
//     fmt.Println(a, b)
//     fmt.Println(names)
// }

// ========================================================================
// 切片文法
// func main() {
//     q := []int{2, 3, 5, 7, 11, 13}
//     fmt.Println(q)
//
//     r := []bool{true, false, true, true, false, true}
//     fmt.Println(r)
//
//     s := []struct {
//         i int
//         b bool
//     }{
//         {2, true},
//         {3, false},
//         {5, true},
//         {7, true},
//         {11, false},
//         {13, true},
//     }
//     fmt.Println(s)
// }

// ========================================================================
// 用 make 创建切片

// func main() {
//     a := make([]int, 5)
//     printSlice("a", a)
//
//     b := make([]int, 0, 5)
//     printSlice("b", b)
//
//     c := b[:2]
//     printSlice("c", c)
//
//     d := c[2:5]
//     printSlice("d", d)
//
// }
//
// func printSlice(s string, x []int) {
//     fmt.Printf("%s len=%d cap=%d %v\n",
//         s, len(x), cap(x), x)
// }

// ========================================================================
// 向切片追加元素
// func main() {
//     var s []int
//     printSlice(s)
//
//     // 添加一个空切片
//     s = append(s, 0)
//     printSlice(s)
//
//     // 这个切片会按需增长
//     s = append(s, 1)
//     printSlice(s)
//
//     // 可以一次性添加多个元素
//     s = append(s, 2, 3, 4)
//     printSlice(s)
// }
//
// func printSlice(s []int) {
//     fmt.Printf("len=%d cap=%d %v\n", len(s), cap(s), s)
// }
